import { initialize } from 'launchdarkly-js-client-sdk';
import { readonly, ref } from 'vue';
import getFlagRef from './getFlagRef';
export const LD_INIT = Symbol();
export const LD_READY = Symbol();
export const LD_CLIENT = Symbol();
export const LD_FLAG = Symbol();
export const LDPlugin = {
    install(app, pluginOptions = {}) {
        const $ldReady = ref(false);
        const $ldInit = (initOptions) => {
            const clientSideID = initOptions.clientSideID ?? pluginOptions.clientSideID;
            const user = initOptions.user ?? pluginOptions.user;
            const options = initOptions.options ?? pluginOptions.options;
            if (clientSideID === undefined || user === undefined) {
                const errMessages = [];
                if (clientSideID === undefined)
                    errMessages.push('clientSideID is undefined');
                if (user === undefined)
                    errMessages.push('user is undefined');
                throw new Error(`Cannot initialize LaunchDarkly: ${errMessages.join(', ')}`);
            }
            const $ldClient = initialize(clientSideID, user, options);
            app.provide(LD_CLIENT, $ldClient);
            const enableStreaming = pluginOptions.streaming === false || initOptions.streaming === false ? false : true;
            app.provide(LD_FLAG, getFlagRef($ldReady, $ldClient, enableStreaming));
            $ldClient.on('ready', () => $ldReady.value = true);
        };
        app.provide(LD_READY, readonly($ldReady));
        if (pluginOptions.clientSideID && pluginOptions.user) {
            $ldInit(pluginOptions);
        }
        else {
            app.provide(LD_INIT, $ldInit);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9saWIvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUE4QyxNQUFNLDRCQUE0QixDQUFBO0FBQ25HLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUF5QyxNQUFNLEtBQUssQ0FBQTtBQUMxRSxPQUFPLFVBQTRCLE1BQU0sY0FBYyxDQUFBO0FBV3ZELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQWtELENBQUE7QUFDL0UsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sRUFBMEMsQ0FBQTtBQUN4RSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsTUFBTSxFQUE0QixDQUFBO0FBQzNELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQXdGLENBQUE7QUFFckgsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHO0lBQ3RCLE9BQU8sQ0FBQyxHQUFRLEVBQUUsZ0JBQWlDLEVBQUU7UUFDbkQsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzNCLE1BQU0sT0FBTyxHQUFHLENBQUMsV0FBMEIsRUFBRSxFQUFFO1lBQzdDLE1BQU0sWUFBWSxHQUFHLFdBQVcsQ0FBQyxZQUFZLElBQUksYUFBYSxDQUFDLFlBQVksQ0FBQTtZQUMzRSxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUE7WUFDbkQsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFBO1lBRTVELElBQUksWUFBWSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUNwRCxNQUFNLFdBQVcsR0FBYSxFQUFFLENBQUE7Z0JBQ2hDLElBQUksWUFBWSxLQUFLLFNBQVM7b0JBQUUsV0FBVyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO2dCQUM3RSxJQUFJLElBQUksS0FBSyxTQUFTO29CQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtnQkFDN0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7YUFDN0U7WUFFRCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUN6RCxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUNqQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsU0FBUyxLQUFLLEtBQUssSUFBSSxXQUFXLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7WUFDM0csR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQTtZQUN0RSxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ3BELENBQUMsQ0FBQTtRQUNELEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBQ3pDLElBQUksYUFBYSxDQUFDLFlBQVksSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFO1lBQ3BELE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtTQUN2QjthQUFNO1lBQ0wsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7U0FDOUI7SUFDSCxDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluaXRpYWxpemUsIHR5cGUgTERDbGllbnQsIHR5cGUgTERVc2VyLCB0eXBlIExET3B0aW9ucyB9IGZyb20gJ2xhdW5jaGRhcmtseS1qcy1jbGllbnQtc2RrJ1xuaW1wb3J0IHsgcmVhZG9ubHksIHJlZiwgdHlwZSBJbmplY3Rpb25LZXksIHR5cGUgUmVmLCB0eXBlIEFwcCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCBnZXRGbGFnUmVmLCB7IHR5cGUgRmxhZ1JlZiB9IGZyb20gJy4vZ2V0RmxhZ1JlZidcblxudHlwZSBMREluaXRPcHRpb25zID0ge1xuICBjbGllbnRTaWRlSUQ/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdXNlcj86IExEVXNlciB8IHVuZGVmaW5lZFxuICBzdHJlYW1pbmc/OiBib29sZWFuXG4gIG9wdGlvbnM/OiBMRE9wdGlvbnMgfCB1bmRlZmluZWRcbn1cblxudHlwZSBMRFBsdWdpbk9wdGlvbnMgPSBMREluaXRPcHRpb25zIC8vIGNhbiBiZSBleHRlbmRlZCB3aXRoIHZ1ZSBwbHVnaW4gc3BlY2lmaWMgb3B0aW9uc1xuXG5leHBvcnQgY29uc3QgTERfSU5JVCA9IFN5bWJvbCgpIGFzIEluamVjdGlvbktleTwobzogTERJbml0T3B0aW9ucykgPT4gTERDbGllbnQ+XG5leHBvcnQgY29uc3QgTERfUkVBRFkgPSBTeW1ib2woKSBhcyBJbmplY3Rpb25LZXk8UmVhZG9ubHk8UmVmPGJvb2xlYW4+Pj5cbmV4cG9ydCBjb25zdCBMRF9DTElFTlQgPSBTeW1ib2woKSBhcyBJbmplY3Rpb25LZXk8TERDbGllbnQ+XG5leHBvcnQgY29uc3QgTERfRkxBRyA9IFN5bWJvbCgpIGFzIEluamVjdGlvbktleTw8VD4oZmxhZ0tleTogc3RyaW5nLCBkZWZhdWx0RmxhZ1ZhbHVlPzogVCB8IHVuZGVmaW5lZCkgPT4gRmxhZ1JlZjxUPj5cblxuZXhwb3J0IGNvbnN0IExEUGx1Z2luID0ge1xuICBpbnN0YWxsKGFwcDogQXBwLCBwbHVnaW5PcHRpb25zOiBMRFBsdWdpbk9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0ICRsZFJlYWR5ID0gcmVmKGZhbHNlKVxuICAgIGNvbnN0ICRsZEluaXQgPSAoaW5pdE9wdGlvbnM6IExESW5pdE9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudFNpZGVJRCA9IGluaXRPcHRpb25zLmNsaWVudFNpZGVJRCA/PyBwbHVnaW5PcHRpb25zLmNsaWVudFNpZGVJRFxuICAgICAgY29uc3QgdXNlciA9IGluaXRPcHRpb25zLnVzZXIgPz8gcGx1Z2luT3B0aW9ucy51c2VyXG4gICAgICBjb25zdCBvcHRpb25zID0gaW5pdE9wdGlvbnMub3B0aW9ucyA/PyBwbHVnaW5PcHRpb25zLm9wdGlvbnNcblxuICAgICAgaWYgKGNsaWVudFNpZGVJRCA9PT0gdW5kZWZpbmVkIHx8IHVzZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlcnJNZXNzYWdlczogc3RyaW5nW10gPSBbXVxuICAgICAgICBpZiAoY2xpZW50U2lkZUlEID09PSB1bmRlZmluZWQpIGVyck1lc3NhZ2VzLnB1c2goJ2NsaWVudFNpZGVJRCBpcyB1bmRlZmluZWQnKVxuICAgICAgICBpZiAodXNlciA9PT0gdW5kZWZpbmVkKSBlcnJNZXNzYWdlcy5wdXNoKCd1c2VyIGlzIHVuZGVmaW5lZCcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGluaXRpYWxpemUgTGF1bmNoRGFya2x5OiAke2Vyck1lc3NhZ2VzLmpvaW4oJywgJyl9YClcbiAgICAgIH1cblxuICAgICAgY29uc3QgJGxkQ2xpZW50ID0gaW5pdGlhbGl6ZShjbGllbnRTaWRlSUQsIHVzZXIsIG9wdGlvbnMpXG4gICAgICBhcHAucHJvdmlkZShMRF9DTElFTlQsICRsZENsaWVudClcbiAgICAgIGNvbnN0IGVuYWJsZVN0cmVhbWluZyA9IHBsdWdpbk9wdGlvbnMuc3RyZWFtaW5nID09PSBmYWxzZSB8fCBpbml0T3B0aW9ucy5zdHJlYW1pbmcgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlXG4gICAgICBhcHAucHJvdmlkZShMRF9GTEFHLCBnZXRGbGFnUmVmKCRsZFJlYWR5LCAkbGRDbGllbnQsIGVuYWJsZVN0cmVhbWluZykpXG4gICAgICAkbGRDbGllbnQub24oJ3JlYWR5JywgKCkgPT4gJGxkUmVhZHkudmFsdWUgPSB0cnVlKVxuICAgIH1cbiAgICBhcHAucHJvdmlkZShMRF9SRUFEWSwgcmVhZG9ubHkoJGxkUmVhZHkpKVxuICAgIGlmIChwbHVnaW5PcHRpb25zLmNsaWVudFNpZGVJRCAmJiBwbHVnaW5PcHRpb25zLnVzZXIpIHtcbiAgICAgICRsZEluaXQocGx1Z2luT3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwLnByb3ZpZGUoTERfSU5JVCwgJGxkSW5pdClcbiAgICB9XG4gIH1cbn1cbiJdfQ==